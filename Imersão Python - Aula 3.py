# -*- coding: utf-8 -*-
"""Imersão Python - Aula 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m8bbN-XQjCpyH_kDvb1bz8jSY9nOgc4y

** Aula 3 - Gráficos**
"""

import pandas as pd
import plotly.express as px

df_principal = pd.read_excel("/content/Imersão Python - Tabela de ações - Aula 2.xlsx", sheet_name="Principal")
df_principal

df_total_acoes = pd.read_excel("/content/Imersão Python - Tabela de ações - Aula 2.xlsx", sheet_name="Total_de_acoes")
df_total_acoes

df_ticker = pd.read_excel("/content/Imersão Python - Tabela de ações - Aula 2.xlsx", sheet_name="Ticker")
df_ticker

df_chatgpt = pd.read_excel("/content/Imersão Python - Tabela de ações - Aula 2.xlsx", sheet_name="ChatGPT")
df_chatgpt

df_principal = df_principal[['Ativo', 'Data','Último (R$)',	'Var. Dia (%)']].copy()
df_principal

df_principal = df_principal.rename(columns={'Último (R$)':'valor_final', 'Var. Dia (%)':'var_dia_pct'}).copy()
df_principal

df_principal['Var_pct'] = df_principal['var_dia_pct'] / 100
df_principal['Valor_inicial'] = df_principal['valor_final'] / (df_principal['Var_pct'] + 1)
df_principal

df_principal = df_principal.merge(df_total_acoes, left_on='Ativo', right_on='Código', how='left')
df_principal

df_principal = df_principal.drop(columns=['Código'])
df_principal

df_principal['Variacao_rs'] = (df_principal['valor_final'] - df_principal['Valor_inicial']) * df_principal['Qtde. Teórica_x']
df_principal

df_principal = df_principal.drop(columns=['Qtde. Teórica_y'])
df_principal

pd.options.display.float_format = '{:.2f}'.format

df_principal

df_principal = df_principal.rename(columns={'Qtde. Teórica_x':'Quantidade_Teorica'}).copy()
df_principal

df_principal['Quantidade_Teorica'] = df_principal['Quantidade_Teorica'].astype(int)
df_principal

df_principal['Status'] = df_principal['Variacao_rs'].apply(lambda x: 'Subiu' if x > 0 else ('Desceu' if x < 0 else 'Estável'))
df_principal

df_principal = df_principal.merge(df_ticker, left_on='Ativo', right_on='Ticker', how='left')
df_principal = df_principal.drop(columns=['Ticker'])
df_principal

df_principal = df_principal.merge(df_chatgpt, left_on='Nome', right_on='Empresa', how='left')
df_principal = df_principal.drop(columns=['Empresa'])
df_principal

df_principal['Idade_categoria'] = df_principal['Idade em Anos'].apply(lambda x: 'Mais de 100' if x > 100 else ('Menos de 50' if x < 50 else 'Entre 50 e 100'))
df_principal

"""**Análises**"""

# Calculando a maior variação
maior = df_principal['Variacao_rs'].max()

# Calculando a menor variação
menor = df_principal['Variacao_rs'].min()

# Calculando a média de variação
media = df_principal['Variacao_rs'].mean()

# Filtrando as linhas de quem subiu e calculando a média
media_subiu = df_principal[df_principal['Status'] == 'Subiu']['Variacao_rs'].mean()

# Filtrando as linhas de quem desceu e calculando a média
media_desceu = df_principal[df_principal['Status'] == 'Desceu']['Variacao_rs'].mean()

# Imprimindo os resultados
print(f"Maior\tR$ {maior:,.2f}")
print(f"Menor\tR$ {menor:,.2f}")
print(f"Média\tR$ {media:,.2f}")
print(f"Média de quem subiu\tR$ {media_subiu:,.2f}")
print(f"Média de quem desceu\tR$ {media_desceu:,.2f}")

df_principal_subiu = df_principal[df_principal['Status'] == 'Subiu']
df_principal_subiu

df_analise_segmento = df_principal_subiu.groupby('Segmento')['Variacao_rs'].sum().reset_index()
df_analise_segmento

df_analise_saldo = df_principal.groupby('Status')['Variacao_rs'].sum().reset_index()
df_analise_saldo

fig = px.bar(df_analise_saldo, x='Status', y='Variacao_rs', text='Variacao_rs', title='Variação Reais por Resultado')
fig.show()

"""Desafio: 1. Pesquisar como exibir os números no gráfico com uma separação mais clara."""

df_analise_saldo['Variacao_rs'] = df_analise_saldo['Variacao_rs'].apply(lambda x: f'R$ {x:,.2f}')
df_analise_saldo

fig = px.bar(df_analise_saldo, x='Status', y='Variacao_rs', text='Variacao_rs', title='Variação Reais por Resultado')
fig.show()

"""Desafio 2. Fazer um gráfico de pizza com o def_analise_segmentos."""

fig = px.pie(df_analise_segmento, names='Segmento', values='Variacao_rs', title='Variação Reais por Segmento')
fig.show()